openapi: 3.0.3
info:
  title: INOA Cloud API
  description: |-
    # Authentication
    This api is secured via [OpenID](https://auth.demo.inoa.io/realms/inoa/.well-known/openid-configuration).
    # Model
    A Thing type consists of the following properties:
    * **name**: human friendly name to identify the thing type in UIs
    * **reference**: technical identifier, e.g. for thing urns like `urn:s0:1`
    * **schema**: JSON schema for configuration objects
  version: ${project.version}
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: inoa.io
    url: https://github.com/inoa-io
servers:
  - url: https://api.demo.inoa.io
    description: INOA Demo instance
security:
  - Bearer: []
  - OpenId: []
paths:
  /gateways:
    get:
      tags: [gateways]
      summary: List gateways
      description: List gateways with filtering and pagination ordered by gatewayId.
      operationId: findGateways
      parameters:
        - $ref: '#/components/parameters/PageablePage'
        - $ref: '#/components/parameters/PageableSize'
        - name: sort
          description: Sorting parameter. Default sort is `gatewayId,desc`.
          in: query
          schema:
            type: array
            items:
              type: string
              pattern: (gatewayId|name|enabled|created|updated)(,(asc|desc))?
            default: ["gatewayId,desc"]
          example: ["name,asc"]
        - name: filter
          description: Search in name & gatewayId. Supports wildcard *, is case insensitive.
          in: query
          schema:
            type: string
            maxLength: 100
            example: isrl
      responses:
        200:
          description: Paginated reults.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayPage'
        400:
          description: Illegal sort, allowed only gatewayId,name,enabled,created,updated.
        401:
          description: Unauthorized
        403:
          description: Forbidden.
  /gateways/{gateway_id}:
    parameters:
      - $ref: '#/components/parameters/GatewayId'
    get:
      tags: [gateways]
      summary: Find gateway
      description: Find gateway by id.
      operationId: findGateway
      responses:
        200:
          description: Returns gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateway'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Gateway not found.
    patch:
      tags: [gateways]
      summary: Update gateway
      description: Update gateway by id.
      operationId: updateGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewayUpdate'
      responses:
        200:
          description: Gateway updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateway'
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        404:
          description: Gateway not found
    delete:
      tags: [gateways]
      summary: Delete gateway
      description: Delete gateway by id.
      operationId: deleteGateway
      responses:
        204:
          description: Gateway deleted.
        401:
          description: Unauthorized
        403:
          description: Forbidden.
        404:
          description: Gateway not found.
  /thing-types:
    get:
      summary: List thing-types
      description: List thing-types with filtering and pagination.
      operationId: findThingTypes
      tags: [thing-types]
      parameters:
        - $ref: '#/components/parameters/PageablePage'
        - $ref: '#/components/parameters/PageableSize'
        - name: sort
          description: Sorting parameter. Default sort is `name,desc`.
          in: query
          schema:
            type: array
            items:
              type: string
              pattern: (name|reference|created|updated)(,(asc|desc))?
            default: ["name,desc"]
          example: ["reference,asc"]
        - name: filter
          description: Search in name and reference. Supports wildcard *, is case insensitive.
          in: query
          schema:
            type: string
            maxLength: 10
            example: s0
      responses:
        200:
          description: Paginated reults.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingTypePage'
        400:
          description: Illegal sort, allowed only name,reference,created,updated.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
    post:
      summary: Create thing type
      description: Create thing type.
      operationId: createThingType
      tags: [thing-types]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThingTypeCreate'
      responses:
        201:
          description: Created thing-type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingType'
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        409:
          description: Name/Reference already assigned.
  /thing-types/{reference}:
    parameters:
      - $ref: '#/components/parameters/ThingTypeReference'
    get:
      summary: Find thing-type
      description: Find thing-type by reference.
      operationId: findThingType
      tags: [thing-types]
      responses:
        200:
          description: Thing-type found for given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingType'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Thing-type not found.
    patch:
      summary: Update thing-type
      description: Update thing-type.
      operationId: updateThingType
      tags: [thing-types]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThingTypeUpdate'
      responses:
        200:
          description: Updated thing-type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingType'
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Thing-type not found.
        409:
          description: Name/Reference already assigned.
    delete:
      summary: Delete thing-type
      description: Deletes thing-types without a thing.
      operationId: deleteThingType
      tags: [thing-types]
      responses:
        204:
          description: Deleted thing-type.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Thing-type not found.
        422:
          description: Unable to delete thing-type because thing exists.
  /things:
    get:
      summary: List things
      description: List things with filtering and pagination.
      operationId: findThings
      tags: [things]
      parameters:
        - $ref: '#/components/parameters/PageablePage'
        - $ref: '#/components/parameters/PageableSize'
        - name: sort
          description: Sorting parameter. Default sort is `name,desc`.
          in: query
          schema:
            type: array
            items:
              type: string
              pattern: (name|reference|created|updated)(,(asc|desc))?
            default: ["name,desc"]
          example: ["reference,asc"]
        - name: filter
          description: Search in name and reference. Supports wildcard *, is case insensitive.
          in: query
          schema:
            $ref: '#/components/schemas/ThingTypeReference'
        - name: reference
          description: Return all things for given reference.
          in: query
          schema:
            type: string
            maxLength: 10
            example: s0
      responses:
        200:
          description: Paginated reults.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingPage'
        400:
          description: Illegal sort, allowed only name,reference,created,updated.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
    post:
      summary: Create thing
      description: Create thing.
      operationId: createThing
      tags: [things]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThingCreate'
      responses:
        201:
          description: Created thing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingType'
        400:
          description: Malformed or reference/configuration is invalid.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        409:
          description: Name already assigned.
  /things/{thing_id}:
    parameters:
      - $ref: '#/components/parameters/ThingId'
    get:
      summary: Find thing
      description: Find thing by id.
      operationId: findThing
      tags: [things]
      responses:
        200:
          description: Thing found for given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        400:
          description: Malformed id.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Thing not found.
    patch:
      summary: Update thing
      description: Update thing.
      operationId: updateThing
      tags: [things]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThingUpdate'
      responses:
        200:
          description: Updated thing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        400:
          description: Malformed or configuration is invalid.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Thing not found.
        409:
          description: Name already assigned.
    delete:
      summary: Delete thing
      description: Delete given thing.
      operationId: deleteThing
      tags: [things]
      responses:
        204:
          description: Thing deleted.
        400:
          description: Malformed id.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Thing not found.
  /things/{thing_id}/configuration:
    parameters:
      - $ref: '#/components/parameters/ThingId'
    put:
      summary: Update thing configuration
      description: Update thing configuration.
      operationId: updateThingConfiguration
      tags: [things]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThingConfiguration'
      responses:
        200:
          description: Updated thing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        400:
          description: Malformed or configuration is invalid.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Thing not found.
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
    OpenId:
      type: openIdConnect
      openIdConnectUrl: https://auth.demo.inoa.io/realms/inoa/.well-known/openid-configuration
  schemas:
    Timestamp:
      description: Common timestamp for created/updated timestamps.
      type: string
      format: date-time
      example: 2021-01-01T00:00:00
    GatewayId:
      description: Id as technical reference (almost never changes).
      type: string
      minLength: 4
      maxLength: 20
      pattern: ^[A-Z][A-Z0-9\-_]{3,19}$
      example: GW-00001
    GatewayName:
      description: Human friendly description (can change).
      type: string
      maxLength: 100
      example: Some gateway name
    GatewayEnabled:
      description: Flag if gateway is enabled or not.
      type: boolean
      default: true
      example: false
    GatewayStatus:
      description: Gateway status.
      properties:
        mqtt:
          $ref: '#/components/schemas/GatewayMqttStatus'
        cloud:
          $ref: '#/components/schemas/GatewayCloudStatus'
      required:
        - cloud
        - mqtt
    GatewayMqttStatus:
      description: MQTT status of a gateway.
      type: object
      properties:
        connected:
          description: Is gateway connected?
          type: boolean
          example: true
        timestamp:
          $ref: '#/components/schemas/Timestamp'
      required:
        - connected
        - timestamp
    GatewayCloudStatus:
      description: Last communication between gateway and cloud services.
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
      required:
        - timestamp
    GatewayPage:
      description: Page of gateways.
      type: object
      properties:
        content:
          description: List of entries on page.
          type: array
          items:
            $ref: '#/components/schemas/GatewayPageEntry'
        total_size:
          description: Total available entries.
          type: integer
          format: int32
          minimum: 0
          example: 0
      required:
        - content
        - total_size
    GatewayPageEntry:
      description: Represents a gateway with some properties for list operations.
      properties:
        gateway_id:
          $ref: '#/components/schemas/GatewayId'
        name:
          $ref: '#/components/schemas/GatewayName'
        enabled:
          $ref: '#/components/schemas/GatewayEnabled'
        status:
          $ref: '#/components/schemas/GatewayStatus'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - gateway_id
        - name
        - enabled
        - status
        - created
        - updated
    Gateway:
      description: Represents a gateway with all properties.
      properties:
        gateway_id:
          $ref: '#/components/schemas/GatewayId'
        name:
          $ref: '#/components/schemas/GatewayName'
        enabled:
          $ref: '#/components/schemas/GatewayEnabled'
        properties:
          description: Properties set by gateway.
          type: string
          maxLength: 100
          additionalProperties:
            type: string
            maxLength: 1000
          example:
            arch: arm64
            os: linux
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - gateway_id
        - name
        - enabled
        - properties
        - created
        - updated
    GatewayUpdate:
      description: Update gateway from given properties.
      properties:
        name:
          $ref: '#/components/schemas/GatewayName'
        enabled:
          $ref: '#/components/schemas/GatewayEnabled'
    ThingTypeName:
      description: Human readable name for a thing type
      type: string
      maxLength: 20
      example: S0-Counter
    ThingTypeEnabled:
      description: Is this thing type enabled for new things?
      type: boolean
      default: true
      example: false
    ThingTypeReference:
      description: Reference for thing type. Uses as prefix for urn and business key.
      type: string
      maxLength: 20
      pattern: ^[a-z0-9\-]$
      example: s0
    ThingTypeSchema:
      description: JSON schema that defines this thing-type.
      externalDocs:
        url: https://json-schema.org/
        description: JSON Schema
      type: object
      format: json-schema
    ThingTypePage:
      description: Page of thing-types.
      type: object
      properties:
        content:
          description: List of entries on page.
          type: array
          items:
            $ref: '#/components/schemas/ThingTypePageEntry'
        total_size:
          description: Total available entries.
          type: integer
          format: int32
          minimum: 0
          example: 0
      required:
        - content
        - total_size
    ThingTypePageEntry:
      description: Represents a thing-type with some properties for list operations.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ThingTypeName'
        enabled:
          $ref: '#/components/schemas/ThingTypeEnabled'
        reference:
          $ref: '#/components/schemas/ThingTypeReference'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - name
        - enabled
        - reference
        - created
        - updated
    ThingType:
      description: Represents a thing-type with all properties.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ThingTypeName'
        enabled:
          $ref: '#/components/schemas/ThingTypeEnabled'
        reference:
          $ref: '#/components/schemas/ThingTypeReference'
        schema:
          $ref: '#/components/schemas/ThingTypeSchema'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - name
        - enabled
        - reference
        - schema
        - created
        - updated
    ThingTypeCreate:
      description: Create thing-type from given properties.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ThingTypeName'
        enabled:
          $ref: '#/components/schemas/ThingTypeEnabled'
        reference:
          $ref: '#/components/schemas/ThingTypeReference'
        schema:
          $ref: '#/components/schemas/ThingTypeSchema'
      required:
        - name
        - enabled
        - reference
        - schema
    ThingTypeUpdate:
      description: Update thing-type from given properties.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ThingTypeName'
        enabled:
          $ref: '#/components/schemas/ThingTypeEnabled'
        schema:
          $ref: '#/components/schemas/ThingTypeSchema'
    ThingId:
      description: Id as technical reference (never changes).
      type: string
      format: uuid
      example: 00000000-0000-0000-0001-000000000000
    ThingName:
      description: Human readable name for a thing.
      type: string
      maxLength: 20
      example: S0-Counter am Wasserhahn
    ThingConfiguration:
      description: Configuration for a thing. Must match `schema` from related thing-type.
      type: object
    ThingPage:
      description: Page of things.
      type: object
      properties:
        content:
          description: List of entries on page.
          type: array
          items:
            $ref: '#/components/schemas/ThingPageEntry'
        total_size:
          description: Total available entries.
          type: integer
          format: int32
          minimum: 0
          example: 0
      required:
        - content
        - total_size
    ThingPageEntry:
      description: Represents a thing with some properties for list operations.
      type: object
      properties:
        thing_id:
          $ref: '#/components/schemas/ThingId'
        name:
          $ref: '#/components/schemas/ThingName'
        reference:
          $ref: '#/components/schemas/ThingTypeReference'
        gateway_id:
          $ref: '#/components/schemas/GatewayId'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - thing_id
        - name
        - reference
        - gateway_id
        - created
        - updated
    Thing:
      description: Represents a thing-type with all properties.
      type: object
      properties:
        thing_id:
          $ref: '#/components/schemas/ThingId'
        name:
          $ref: '#/components/schemas/ThingName'
        reference:
          $ref: '#/components/schemas/ThingTypeReference'
        configuration:
          $ref: '#/components/schemas/ThingConfiguration'
        gateway_id:
          $ref: '#/components/schemas/GatewayId'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - thing_id
        - name
        - reference
        - configuration
        - gateway_id
        - created
        - updated
    ThingCreate:
      description: Create thing from given properties.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ThingName'
        reference:
          $ref: '#/components/schemas/ThingTypeReference'
        configuration:
          $ref: '#/components/schemas/ThingConfiguration'
        gateway_id:
          $ref: '#/components/schemas/GatewayId'
      required:
        - name
        - reference
        - configuration
        - gateway_id
    ThingUpdate:
      description: Update thing from given properties.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ThingName'
        configuration:
          $ref: '#/components/schemas/ThingConfiguration'
  parameters:
    PageablePage:
      name: page
      description: Page number for pagination.
      in: query
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 0
    PageableSize:
      name: size
      description: Page size for pagination. Server can ignore large page sizes.
      in: query
      schema:
        type: integer
        format: int32
        minimum: 1
      example: 50
    GatewayId:
      name: gateway_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/GatewayId'
    ThingTypeReference:
      name: reference
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ThingTypeReference'
    ThingId:
      name: thing_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ThingId'
